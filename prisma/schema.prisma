generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Admin {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  role      String   @default("admin")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Patient {
  id        String   @id @default(cuid())
  name      String
  email     String   @unique
  password  String
  role      String   @default("patient")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  appointments Appointment[]
}

model Doctor {
  id               String          @id @default(cuid())
  slug             String          @unique
  name             String
  email            String          @unique
  password         String
  specialty        String
  qualification    String
  profileImage     String
  phone            String
  address          String
  totalAppointments Int?           @default(0)
  role             String          @default("doctor")
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt

  doctorHelpers    DoctorHelper[]
  appointments     Appointment[]
  schedules        Schedule[]
}

model DoctorHelper {
  id          String   @id @default(cuid())
  slug        String   @unique
  doctorId    String
  name        String
  email       String   @unique
  password    String
  profileImage String
  role        String   @default("doctorHelper")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  doctor      Doctor   @relation(fields: [doctorId], references: [id], onDelete: Cascade)
}

model Appointment {
  id        String   @id @default(cuid())
  patientId String
  doctorId  String
  date      String
  time      String
  status    String   @default("pending")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  patient   Patient  @relation(fields: [patientId], references: [id], onDelete: Cascade)
  doctor    Doctor   @relation(fields: [doctorId], references: [id], onDelete: Cascade)
}

model Schedule {
  id        String   @id @default(cuid())
  doctorId  String   @unique
  days      String[]
  startTime String[]
  endTime   String[]
  active    Boolean[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  doctor    Doctor   @relation(fields: [doctorId], references: [id], onDelete: Cascade)
}
